[
  {
    "filePath": "C:\\src\\github.com\\codeleague\\codecoach\\src\\app.constants.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\src\\github.com\\codeleague\\codecoach\\src\\app.ts",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: ')' expected.",
        "line": 59,
        "column": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'content' is defined but never used.",
        "line": 24,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'supContent' is defined but never used.",
        "line": 30,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 1,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\r\n\r\nimport { Config, ProjectType } from './Config';\r\nimport { File } from './File';\r\nimport { Log } from './Logger';\r\nimport { CSharpParser, LintItem, Parser, TSLintParser } from './Parser';\r\nimport { GitHub, GitHubPRService, VCS } from './Provider';\r\n\r\nclass App {\r\n  private readonly parser: Parser;\r\n  private readonly vcs: VCS\r\n\r\n  constructor() {\r\n    this.parser = App.setProjectType(Config.app.projectType);\r\n    const githubPRService = new GitHubPRService(\r\n      Config.provider.token,\r\n      Config.provider.repoUrl,\r\n      Config.provider.prId,\r\n    );\r\n    this.vcs = new GitHub(githubPRService);\r\n  }\r\n\r\n  async start() {\r\n    const logs = await this.parseBuildData(Config.app.buildLogFiles);\r\n    Log.info('Build data parsing completed');\r\n\r\n    await this.vcs.report(logs);\r\n    Log.info('Report to VCS completed');\r\n\r\n    await App.writeLogToFile(logs);\r\n    Log.info('Write output completed');\r\n  }\r\n\r\n  private static setProjectType(type: ProjectType): Parser {\r\n    switch (type) {\r\n      case ProjectType.csharp:\r\n        return new CSharpParser(Config.app.cwd);\r\n      case ProjectType.tslint:\r\n        return new TSLintParser(Config.app.cwd);\r\n    }\r\n  }\r\n\r\n  private async parseBuildData(files: string[]): Promise<LintItem[]> {\r\n    const parserTasks = files.map(async (file) => {\r\n      const content = await File.readFileHelper(file);\r\n      this.parser.withContent(content);\r\n    });\r\n\r\n    await Promise.all(parserTasks);\r\n\r\n    return this.parser.getLogs();\r\n  }\r\n\r\n  private static async writeLogToFile(items: LintItem[]): Promise<void> {\r\n    await File.writeFileHelper(Config.app.logFilePath, JSON.stringify(logs, null, 2));\r\n  }\r\n}\r\n\r\nnew App(",
    "usedDeprecatedRules": []
  }
]
